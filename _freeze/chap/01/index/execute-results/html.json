{
  "hash": "742acdb72a59fbc8a8c19b8704750bc4",
  "result": {
    "engine": "jupyter",
    "markdown": "---\nauthor: 浙江工商大学计算机学院\ntitle: 第 1 章 对变化进行建模\nimage: cover.jpg\nformat:\n  revealjs:\n    theme: [white, custom.scss]\n    mermaid:\n      theme: neutral\n---\n\n\n## 弹簧系统\n\n:::: columns\n\n::: {.column width=\"55%\"}\n\n::: {#8d5a2256 .cell layout-ncol='1' execution_count=1}\n\n::: {.cell-output .cell-output-display}\n![](index_files/figure-revealjs/cell-2-output-1.png){width=812 height=434}\n:::\n:::\n\n\n$斜率 = \\frac{4.875-3.25}{300-200} = 0.01625$\n\n:::\n\n::: {.column width=\"25%\" height=\"100%\"}\n| 质量($m$) | 拉伸($e$)|\n|-----------|----------|\n| 50        | 1.000    |\n| 100       | 1.875    |\n| 150       | 2.750    |\n| 200       | 3.250    |\n| 250       | 4.375    |\n| 300       | 4.875    |\n| 350       | 5.675    |\n| 400       | 6.500    |\n| 450       | 7.250    |\n| 500       | 8.000    |\n| 550       | 8.750    |\n:::\n\n\n::: {.column width=\"20%\"}\n![](spring.png)\n:::\n\n::::\n\n##  弹簧系统(OJS)\n\n\n```{ojs}\ndata = FileAttachment(\"spring.csv\").csv({ typed: true })\n```\n\n:::: columns\n\n::: {.column width=\"55%\"}\n\n\n```{ojs}\n//| layout-ncol: 1\nPlot.plot({\n  grid: true,\n  marks: [\n    Plot.ruleY([0]),\n    Plot.ruleX([0]),\n    Plot.dot(data, {x: \"质量\", y: \"拉伸\", symbol: \"circle\", fill: \"currentColor\"}),\n    Plot.line([[0, 0], [550, 8.9375]], {stroke: \"green\"}),\n    Plot.dot([[200, 3.25], [300, 4.875]], {fill: \"red\"}),\n    Plot.text([\"e = 0.01625m\"], {x: 250, y: 3, fontSize: 16, fontWeight: \"bold\"})\n  ]\n}) \n```\n\n$斜率 = \\frac{4.875-3.25}{300-200} = 0.01625$\n\n:::\n\n::: {.column width=\"25%\" height=\"100%\"}\n\n```{ojs}\nInputs.table(data, {\n  // TODO: uncomment the following when observable is updated\n  // select: false,\n  format: {\n    '拉伸': d => d.toFixed(3)\n  },\n  align: {\n    '质量': \"left\"\n  },\n  height: \"100%\" })\n```\n\n:::\n\n::: {.column width=\"20%\"}\n![](spring.png)\n:::\n\n::::\n\n## 对变化进行建模\n\n* 未来值 = 现在值 + 变化\n* 变化 = 未来值 - 现在值\n* **离散时间**: 差分方程(difference equation)\n* **连续时间**: 微分方程(第11章)\n\n## 差分方程\n\n对于数列$A = {a_0, a_1, a_2, a_3, \\cdots}$, 其一阶差分定义为:\n\n:::: columns\n::: {.column width=\"40%\"}\n$$\n\\Delta a_0 = a_1 - a_0 \\\\\n\\Delta a_1 = a_2 - a_1 \\\\\n\\Delta a_2 = a_3 - a_2 \\\\\n\\Delta a_3 = a_4 - a_3 \\\\\n\\cdots \\\\\n\\Delta a_n = a_{n+1} - a_n\n$$\n:::\n::: {.column width=\"60%\"}\n![](images/difference.png)\n:::\n::::\n\n## 储蓄问题{ .smaller }\n\n考虑本金1000美元, 月利息1%的储蓄问题: $A = (1000, 1010, 1020.10, 1030.30, ...)$.\n\n$$\n\\Delta a_0 = a_1 - a_0 = 1010.0 - 1000.0 = 10.0 \\\\\n\\Delta a_1 = a_2 - a_1 = 1020.1 - 1010.0 = 10.1 \\\\\n\\Delta a_2 = a_3 - a_2 = 1030.3 - 1020.1 = 10.2 \\\\\n\\cdots \\\\\n\\Delta a_n = a_{n+1} - a_n = 0.01a_n \\\\\n$$\n\n$$\na_{n+1} = a_n + 0.01a_n = 1.01a_n, n = 0, 1, 2, 3 \\\\\na_0 = 1000\n$$\n\n::: fragment\n如果每月取出50美元$\\cdots$\n\n$$\\Delta a_n = a_{n+1} - a_n = 0.01a_n - 50$$\n:::\n\n## 如何找出变化?\n\n在多数情况下, 很难象上述例子那样精确表述, 因此我们通过如下步骤找出变化:\n\n::: callout-important\n1.  画出变化\n2.  观察变化规律\n3.  用数学术语描述变化\n:::\n\n变化 = $\\Delta a_n$ = 某个函数$f$\n\n对于离散情况:\n\n变化 = $\\Delta a_n$ = $a_{n+1} - a_n$ = $f$(序列中的项, 外部项)\n\n## 按揭买房\n\n六年前按揭20年买了一套80000美元的房子, 月供880.87美元并付每月1%的利息. 问现在还欠银行多少?\n\n$$\\Delta b_n = b_{n+1} - b_n = 0.01b_n - 880.87$$\n\n求解下列方程即可:\n\n$$\n\\begin{align*}\nb_{n+1} &= 1.01b_n - 880.87 \\\\\nb_0 &= 80000\n\\end{align*}\n$$\n\n$$B = (80000, 79919.13, 79837.45, \\cdots)$$\n\n## 按揭买房\n\n![](mort.png)\n\n## 用差分方程来近似变化\n\n- 变化 = $\\Delta a_n$ = 某个函数$f$\n- 离散变化与连续变化\n- 模型的细化: 生、死、资源\n\n## 酵母培养 -- 找出模型\n\n![](yeast.png)\n\n$$\\Delta p_n = p_{n+1} - p_n = k(665 - p_n)p_n$$\n\n## 酵母培养 -- 模型数值求解\n\n![](yeast-fit.png){.smaller}\n\n$$k \\approx 0.00082$$ $$p_{n+1} = p_n + 0.00082(665 - p_n)p_n$$\n\n## 酵母培养 -- 模型验证\n\n![](yeast-verify.png)\n\n$$p_{n+1} = p_n + 0.00082(665 - p_n)p_n$$\n\n::: {.callout-tip title=\"思考\"}\n如何为书上例2传染病传播模型加入其它因素?\n:::\n\n## 地高辛在血流中的变化\n\n::: small-table\n| n            | 0      | 1      | 2      | 3      | 4      | 5      | 6      | 7      | 8     |\n|--------------|--------|--------|--------|--------|--------|--------|--------|--------|-------|\n| $a_n$        | 0.5    | 0.345  | 0.238  | 0.164  | 0.113  | 0.078  | 0.054  | 0.037  | 0.026 |\n| $\\Delta a_n$ | -0.155 | -0.107 | -0.074 | -0.051 | -0.035 | -0.024 | -0.017 | -0.011 |       |\n:::\n\n:::: columns\n\n::: {.column width=50%}\n![](images/digoxin.png)\n:::\n\n::: {.column width=50%}\n$$\n\\Delta a_n = -0.31a_n \\\\\na_{n+1} -  a_n = -0.31a_n \\\\\na_{n+1} = 0.69a_n\n$$\n:::\n::::\n\n## 动态系统的解法 -- 猜测 {.smaller} \n\n:::: columns\n::: {.column width=60%}\n存款问题: $a_{n+1} = 1.01a_n, a_0 = 1000$\n\n$$\n\\begin{align*}\na_1 &= 1010.0 = 1.01(1000)\\\\\na_2 &= 1020.1 = 1.01(1010) = 1.01^2 (1000)\\\\\na_3 &= 1030.3 = 1.01(1020.1) = 1.01^3 (1000)\\\\\na_4 &= 1040.6 = 1.01(1030.3) = 1.01^4 (1000)\n\\end{align*}\n$$\n\n:::\n::: {.column width=40%}\n![](saving.png)\n:::\n::::\n\n## 动态系统的解法 -- 猜测 \n\n猜测: $a_k = 1.01^k(1000)$\n验证、结论: ...\n\n::: {.callout-tip title=\"猜测法的一般步骤\"}\n1.  观察模式\n2.  猜测动力系统的形式\n3.  用带入法来测试该猜测\n4.  接受或拒绝该推测：取决于代入和代数运算后结果是否满足该动力系统。\n:::\n\n推论： 形式为$a_{n+1} = ra_n$的动态系统的解为$a_k = r^k a_0$.\n\n## $a_{n+1}=ra_n$\n\n$r = ?$\n\n:::: columns\n::: { .column width=40% }\n![](r0.png)\n![](rn.png)\n:::\n\n::: { .column width=20% }\n:::\n\n::: { .column width=40% }\n![](rf.png)\n![](rnf.png)\n:::\n::::\n\n\n## $a_{n+1}=ra_n + b$\n\n![](rb.png){width=40%}\n\n## 不动点(平衡点）\n\n![Digoxin浓度变化](fixedpoint.png)\n\n## 不动点\n\n$$a_{n+1} = 1.01a_n -1000$$\n\n![投资](invest.png)\n\n## $r = 1$\n\n$$a_{n+1} = a_n -300$$\n\n![](poor.png)\n\n## 不动点\n\n$a_{n+1} = ra_n + b, r \\neq 1$的不动点为：\n\n$$a = \\frac{b}{1-r}$$\n\n上述动态系统的解为： $a_k=r^kc+\\frac{b}{1-r}$.\n\n::: {.callout-tip title=\"思考\"}\n$r$的值不同时，长期来说系统如何变化？\n:::\n\n## 非线性系统\n\n![](nonlinear.png){width=40%}\n\n## 差分方程组\n\n- 找出不动点\n- 当初始值在不动点附近时，系统如何变化\n\n研究系统的长期变化，看系统对如下条件是否敏感：\n\n- 初始条件\n- 对模型中的常量进行扰动\n\n## 汽车租赁公司\n\n:::: columns\n::: {.column width=60%}\n![](taxi.png)\n:::\n::::\n\n* $O_n$: 第$n$天营业结束时在奥兰多的车辆数\n* $T_n$: 第$n$天营业结束时在坦帕的车辆数\n\n$$\n\\begin{align*}\nO_{n+1} &=0.6O_n + 0.3T_n \\\\\nT_{n+1} &=0.4O_n + 0.7T_n\n\\end{align*}\n$$\n\n## 计算平衡点 \n\n如果存在平衡点$O$, $T$: $$O=O_{n+1}=O_n$$ $$T=T_{n+1}=T_n$$\n推导出： $$O=0.6O + 0.3T$$ $$T=0.4O + 0.7T$$\n\n## 方程求解 \n\n$O=\\frac{3}{4}T$满足上述方程组.\n如果公司有7000辆车，则$(O, T) = (3000, 4000)$处开始，保持不变。\n\n分析下述四种初始条件：\n\n![](taxi-cases.png){width=\"40%\"}\n\n## 分析\n\n![](taxi-case12.png){width=\"40%\"}\n\n## 分析\n\n![](taxi-case34.png){width=\"40%\"}\n\n## 结论\n四种情形中每一种情形在一周内都是和平衡点$(3000,4000)$很接近的，甚至在其中一个城市没有车的情况也是如此。结果显示，平衡点是稳定的而且对初始值不敏感的。\n\n思考:该系统是否对$O_{n+1}$和$T_{n+1}$的系数敏感？\n\n## 特拉法尔加战斗\n\n法西联军33艘战舰，英军27艘战舰，在一次遭遇战中每方的战舰损失都是对方战舰的$10\\%$。\n\n**动力系统模型** 令$n$表示战斗过程中遭遇战的阶段并定义：\n\n- $B_n =$第$n$阶段英军的战舰数\n- $F_n =$第$n$阶段法西联军的战舰数\n\n## 死拼打法\n\n战斗结束：英军全面战败，剩3艘战舰其中一艘严重损坏，法军大约还有18艘战舰。\n\n![](fight-death.png){width=\"40%\"}\n\n## 各个击破\n\n![](fight-france.png){width=\"40%\"}\n\n策略：英军13艘攻击$A$；然后，全力攻击$B$，最后攻击$C$。\n\n## 战斗A\n\n![](fight-A.png){width=\"40%\"}\n\n## 战斗B\n\n![](fight-B.png){width=\"40%\"}\n\n## 战斗C\n\n![](fight-C.png){width=\"40%\"}\n\n## 战果\n英军大获全胜。现实世界：法西联军没有参加战斗C，而是把剩下的约13艘战舰撤回法国。\n\n## 斑点猫头鹰和隼\n\n- $O_n$, $H_n$分别表示第$n$天猫头鹰和隼的数量\n- $\\Delta O_n=k_1O_n$, $\\Delta H_n=k_2H_n$ (不考虑竞争）\n- $\\Delta O_n=k_1O_n - k_3O_nH_n$, $\\Delta H_n=k_2H_n-k_4O_nH_n$ (考虑竞争）\n- $O_{n+1}=(1+k_1)O_n - k_3O_nH_n$\n- $H_{n+1}=(1+k_2)H_n-k_4O_nH_n$\n\n## 求解平衡点\n\n- $O_{n+1}=1.2O_n - 0.001O_nH_n$\n- $H_{n+1}=1.3H_n - 0.002O_nH_n$\n\n如果$(O,H)$为平衡点则$O_{n+1}=O_n=O$, $H_{n+1}=H_n=H$：\n\n- $O=1.2O - 0.001OH \\Rightarrow O = 0 or H = 200$\n- $H=1.3H - 0.002OH \\Rightarrow H = 0 or O = 150$\n\n## 平衡点分析 \n\n两个平衡点: $(0, 0)$, $(150, 200)$. 为什么？\n\n![](owl.png){width=\"40%\"}\n![](owl-start.png){width=\"40%\"}\n\n## 情况1\n\n![](owl-1.png){width=\"40%\"}\n\n## 情况2\n\n![](owl-2.png){width=\"40%\"}\n\n## 情况3\n\n![](owl-3.png){width=\"40%\"}\n\n## 对初始条件的敏感性和长期行为 \n\n如果在栖息地安置350只猫头鹰和隼：\n\n1.  如果150头为猫头鹰：猫头鹰和隼的数量不变（150、200）\n2.  如果149头或更少猫头鹰：猫头鹰将灭绝\n3.  如果151头或更多猫头鹰：隼将灭绝\n4.  该模型对初始条件极其敏感，平衡点不稳定。\n\n## 旅客趋势\n\n![](party.png){width=\"60%\"}\n\n* $S_n =$ 第$n$个旅行周乘坐US Airways的旅客数\n* $U_n =$ 第$n$个旅行周乘坐United Airlines的旅客数\n* $A_n =$ 第$n$个旅行周乘坐American Airlines的旅客数\n\n## 差分方程组\n\n$$\nS_{n+1}=0.75S_n+0.20U_n+0.40A_n \\\\\nU_{n+1}=0.05S_n+0.60U_n+0.20A_n \\\\\nA_{n+1}=0.20S_n+0.20U_n+0.40A_n\n$$\n\n平衡点: $S_{n+1}=S_n=S$, $U_{n+1}=U_n=U$, $A_{n+1}=A_n=A$:\n\n$$\n-0.25S+0.20U+0.40A=0 \\\\\n0.05S-0.40U+0.20A=0 \\\\\n0.20S+0.20U-0.60A=0\n$$\n\n## 平衡点分析\n\n$S:U:A = 2.2221:0.7777694:1$\n\n::: center\n![](party-case.png){width=\".8\\\\textwidth{}\"}\n:::\n\n## 情况1\n\n::: center\n![](party-1.png){width=\".9\\\\textwidth{}\"}\n:::\n\n## 情况2\n\n::: center\n![](party-2.png){width=\".9\\\\textwidth{}\"}\n:::\n\n## 情况3\n\n::: center\n![](party-3.png){width=\".9\\\\textwidth{}\"}\n:::\n\n## 情况4\n\n::: center\n![](party-4.png){width=\".9\\\\textwidth{}\"}\n:::\n\n## 总结\n\n系统相当稳定，即使刚开始没有人坐US Airways和United\nAirlines的旅客数.\n\n",
    "supporting": [
      "index_files/figure-revealjs"
    ],
    "filters": [],
    "includes": {}
  }
}