---
author: 浙江工商大学计算机学院
title: MATLAB
format:
  revealjs:
    theme: white
    code-line-numbers: false
    mermaid:
      theme: neutral
    include-in-header:
      text: |
        <style>
          .small-table table {
            font-size: .6em
          }
        </style>
---

## MATLAB


* MATLAB是**ma**trix **lab**oratory的缩写
* 提供强大的矩阵和数组运算
* 方便进行科学与工程计算

::: {layout="[[50, 20]]" layout-valign="center"}
![](images/matlab-system.png)

![](images/matlab-usage.png)
:::


## 界面

![](images/matlab.jpg)

# 矩阵向量

矩阵和向量是MATLAB中最重要的数据结构

## 变量


:::: columns

::: {.column width="60%"}
* 所有的MATLAB变量都是多维数组
* 变量区分大小写
* 用`ans`来存储未指定变量的结果
* `format`: 改变数字显示格式
* `save/load`: 保存/加载变量
* `clear`: 清除变量
* `clc`: 清除MATLAB命令窗口
* `who`: 显示所有变量
* `help`: 显示帮助
:::

::: {.column width="10%"}
:::

::: {.column width="30%"}

~~~ matlab
>> a = 1
a =
     1
>> b = pi
b =
    3.1416
>> c = a + b
c =
    4.1416
>> d = cos(a)
d =
    0.5403
>> sin(a)
ans =
    0.8415
~~~
:::

::::

## 语句与变量

* 语句与变量
  * `变量 = 表达式`
  * `表达式`
* 数: 默认全部是 double 类型
* 关系运算： `<, <=, >, >=, ==, ~=`
* 无短路逻辑运算：`&, |, ~`
* 短路逻辑运算：`&&, ||, ~`
* `any`, `all`

## 语句分隔

* 逗号和分号可作为指令间的分隔符
* 分号如果出现在指令后，屏幕上将不显示结果

``` matlab
>> a = 2, b = 3
a =
     2
b =
     3
>> a = 2; b = 3
b =
     3
>> c = a + b;
>> c = a + b
c =
     5
```

## 矩阵和数组

* 创建数组时，元素用逗号(`,`)或空格分隔
* 数组就是一个行向量

``` matlab
>> a = [1, 2, 3, 4]

a =

     1     2     3     4
```

* 创建包含多行的矩阵时，行与行之间用分号(`;`)分隔

``` matlab
>> a = [1, 2, 3; 4, 5, 6; 7, 8, 9]

a =

     1     2     3
     4     5     6
     7     8     9
```

## 矩阵元素

:::: columns

::: {.column width="40%"}
- 实数
- 复数(如`3+4i`、`1+2j`)
- 任何MATLAB表达式
- 行（列）向量
- 另外一个矩阵
:::

::: {.column width="5%"}
:::

::: {.column width="55%"}

``` matlab
>> a=[1 2 3;4 5 6]
a =
     1     2     3
     4     5     6
>> b = [a; [7,8,9]]
b =
     1     2     3
     4     5     6
     7     8     9
>> x=[2 pi/2;sqrt(3) 3+5i]
x =
   2.0000 + 0.0000i   1.5708 + 0.0000i
   1.7321 + 0.0000i   3.0000 + 5.0000i
```
:::

::::

## 用函数创建矩阵


:::: columns

::: {.column width="60%"}
- 空阵: `[]`
- 随机矩阵: `rand`
- 单位矩阵: `eye`
- 全部元素都为0的矩阵: `zeros`
- 全部元素都为1的矩阵: `ones`
:::

::: {.column width="5%"}
:::

::: {.column width="35%"}

``` matlab
>> z = zeros(2, 3)
z =
     0     0     0
     0     0     0

>> a = rand(2, 2)
a =
    0.9572    0.8003
    0.4854    0.1419

>> b = ones(2) - eye(2)
b =
     0     1
     1     0
```
:::

::::

## 等间距向量

* 可以用冒号(`:`)生成等间距向量
* `a:b`表示从`a`到`b`的等间距向量
* `a:s:b`表示从`a`到`b`的等间距向量，每隔`s`个元素

``` matlab
>> 1:5
ans =
     1     2     3     4     5

>> 1:2:5
ans =
     1     3     5

>> 5:-2:1
ans =
     5     3     1
```

## 矩阵和向量运算

* 可以用一个运算符或函数对所有元素进行运算

``` matlab
>> a = magic(2)
a =
     1     3
     4     2
>> a + 10
ans =
    11    13
    14    12
>> sin(a)
ans =
    0.8415    0.1411
   -0.7568    0.9093
>> sqrt(a)
ans =
    1.0000    1.7321
    2.0000    1.4142
```

## 常用矩阵运算

:::: columns

::: {.column width="60%"}
* `'`: 矩阵转置
* `inv`: 矩阵求逆
* `det`: 行列式的值
* `eig`: 矩阵的特征值
* `diag`: 对角线元素
:::

::: {.column width="40%"}

``` matlab
>> a = magic(2)
a =
     1     3
     4     2
>> b = a'
b =
     1     4
     3     2
>> det(a)
ans =
   -10
>> c = inv(a)
c =
   -0.2000    0.3000
    0.4000   -0.1000
```
:::

::::

## 矩阵加减

* 相加、减的两矩阵行列必须相同，对应元素相加减。

``` matlab
>> a = [1, 2, 3; 4, 5, 6; 7, 8, 9]
a =
     1     2     3
     4     5     6
     7     8     9
>> b = [1, 4, 7; 2, 5, 8; 3, 6, 9]
b =
     1     4     7
     2     5     8
     3     6     9
>> c = a + b
c =
     2     6    10
     6    10    14
    10    14    18
```

## 矩阵乘法

- $a$矩阵的列数必须等于$b$矩阵的行数

``` matlab
>> a = [-1; 0; 2]
a =
    -1
     0
     2
>> b = [-2; -1; 1]
b =
    -2
    -1
     1
>> a' * b
ans =
     4
>> a * b'
ans =
     2     1    -1
     0     0     0
    -4    -2     2
```

## 矩阵除法

* MATLAB中有两种矩阵除法： 左除`\`和右除`/`

``` matlab
% a \ b => inv(a)*b
% a / b => a*inv(b)

>> a = magic(2)
a =
     1     3
     4     2
>> det(a)
ans =
   -10
>> a * inv(a)
ans =
    1.0000   -0.0000
         0    1.0000
>> a / a
ans =
     1     0
     0     1
```

## 求解线性方程组

$$\begin{array}{rcl} 2x_1 + x_2 - 5x_3 + x_4 &=& 8 \\ x_1 - 3x_2 - 6x_4 &=& 9 \\ 2x_2 - x_3 + 2x_4 &=& -5 \\ x_1 + 4x_2 - 7x_3 + 6x_4 &=& 0 \end{array} $$

``` matlab
>> A=[2,1,-5,1; 1,-3,0,-6;0,2,-1,2;1,4,-7,6];
>> b=[8;9;-5;0];
>> det(A)
ans =
   27.0000
>> x = A\b
x =
    3.0000
   -4.0000
   -1.0000
    1.0000
```

## 逐元素运算

* `+`、`-`本身就是逐元素运算
* `sin`、`sqrt`等大多数函数都是逐元素运算
* `*`、`/`、`^`等前面加一个`.`表示逐元素运算


:::: columns

::: {.column width="50%"}

``` matlab
>> a = magic(2)
a =
     1     3
     4     2

>> b = a'
     1     4
     3     2

>> a .* b
ans =
     1    12
    12     4
```
:::

::: {.column width="50%"}
``` matlab
>> a ./ b
ans =
    1.0000    0.7500
    1.3333    1.0000

>> a .^ 2
ans =
     1     9
    16     4

>> 2 .^ a
ans =
     2     8
    16     4
```
:::

::::

## 下标

:::: columns

::: {.column width="70%"}

* MATLAB的下标是从1开始的
* `A(i,j)`表示第`i`行第`j`列
* `A(i)`表示逐列访问时的第`i`个元素
  * 可以用`A(:)`将`A`转换为列向量
* `end`表示最后一个元素
:::

::: {.column width="30%"}

``` matlab
>> A = magic(3)
A =
     8     1     6
     3     5     7
     4     9     2
>> A(1,1)
ans =
     8
>> A(4)
ans =
     1
>> A(end, end) = 10
A =
     8     1     6
     3     5     7
     4     9    10
```

:::

::::


## 下标越界

* 如果读取的下标超出范围，会报错
* 如果写入的下标超出范围，矩阵会自动扩充

``` matlab
>> A = magic(2)
A =
     1     3
     4     2

>> A(3,3)
Index in position 1 exceeds array bounds. Index must not exceed 2.

>> A(3,3) = 10
A =
     1     3     0
     4     2     0
     0     0    10
```

## 同时访问多个元素

* 下标中可以使用向量访问多个元素
* 可以用冒号`:`生成下标向量

``` matlab
>> A = magic(3)
A =
     8     1     6
     3     5     7
     4     9     2
>> A(1, 1:end)
ans =
     8     1     6
>> A(1, [1, 3])
ans =
     8     6
>> A(1:2:3, 1:2:3) = 0
A =
     0     1     0
     3     5     7
     0     9     0
```

## 下标访问示例

``` matlab
A = [1,2,3; 4,5,6; 7,8,9]
A(3,3) = A(1,3) + A(3,1)
A(1:3, end)  = A(1:3, 1)
A(1:3,3)
A(1:2, 2:3)
A(:, 2)
A(1, :)
A([1,3], [1,3])
```
::: {.callout-note}
* 如何取出一个矩阵的奇数行、偶数列？
* 如何取出一个矩阵的四角元素？
* 如何将一个矩阵所有的列左右反转？
* 如何将一个矩阵所有的奇数行都置0？
:::

# 常用数学函数

MATLAB提供了丰富的标准函数，利用这些标准函数可以很方便地进行科学与工程计算

## 向量的最大值

`max(x)`
: 返回向量`x`的最大值，如果`x`中包含复数元素，则按模取最大值

`[y, i] = max(x)`
: 返回向量`x`的最大值存入`y`，最大值的序号存入`i`，如果`x`中包含复数元素，则按模取最大值

::: {.callout-tip}
最小值`min`与之类似
:::

## 矩阵的最大值

`max(A)`
: 返回一个行向量，第`i`个元素是矩阵`A`的第`i`列的最大值

`[y, u] = max(A)`
: 返回行向量`y`和`u`，`y`是`A`每列最大值，`u`是最大值所在行

`max(A, [], dim)`
:
* `dim`取1时，和`max(A)`完全相同
* `dim`取2时，按行取最大值

::: {.callout-tip}
最小值`min`与之类似
:::

## 求和与求积

`sum(x)`
: 返回向量`x`各元素之和

`sum(A)`
: 返回一个行向量，其第`i`个元素是`A`的第`i`列元素之和

`sum(A, dim)`
:
* `dim = 1`时相当于sum(A)
* `dim = 2`时，返回列向量

::: {.callout-tip}
求乘积`prod`与之类似
:::

## 平均值

$$ \bar{x} = \frac{1}{n} \sum_{i=1}^{n} x_i $$

`mean(x)`
: 返回向量`x`的算法平均值

`y = mean(A,dim)`
:
* `dim = 1`返回行向量`y`，按列求平均值
* `dim = 2`返回列向量`y`，按行求平均值

## 标准方差

$\sigma_1 = \sqrt{\frac{1}{n-1} \sum_{i=1}^{n} (x_i - \bar{x})^2}$

$\sigma_2 = \sqrt{\frac{1}{n} \sum_{i=1}^{n} (x_i - \bar{x})^2}$

`std(x)`
: 返回向量`x`的标准方差

`y=std(A,flag,dim)`
:
* `dim = 1`: 求各列元素的标准方差
* `dim = 2`: 求各行元素的标准方差
* `flag = 0`: 按照$\sigma_1$计算
* `flag = 1`: 按照$\sigma_2$计算

## 排序

`y=sort(x)`
: 返回一个对`x`中元素按升序排列后的向量`y`

`[y,i] = sort(x)`
: 返回一个对`x`中元素按升序排列的向量`y`，而`i`记录`y`中元素在`x`中的位置

# 多项式

## 多项式的表示

* $n$次多项式用一个$n+1$维的行向量表示，缺少的幂次项系数为0
* 如果$n$次多项式表示为

$$p(x)=a_1x^n+a_2x^{n-1}+...+a_nx+a_{n+1}$$

则在MATLAB中，$p(x)$用向量$p=[a_1,a_2,…,a_n,a_{n+1}]$表示

## 多项式的运算

加减运算
: 向量加减，如果项数不同，在项数较少的前面补0

乘法运算
: `conv(p1,p2)`表示多项式p1, p2的乘积。

除法运算
: `[q, r] = deconv(p1, p2)`，其中`q`是商，`r`是余数

`p`的导函数
: `p=polyder(p1)`

`p1`和`p2`乘积的导函数
: `p=polyder(p1,p2)`

`p1`和`p2`之商的导函数
: `[p,q] = polyder(p1,p2)` ，`p`和`q`是分子、分母

## 多项式的求值与求根

`y=polyval(p, x)`
:
* 若x为一数值，则求多项式在该点的值
* 若x为一向量，则求其中每个元素对应多项式的值

`x=roots(p)`
: 求多项式的根

`p=poly(x)`
: 建立以x为根的多项式

`z=fzero(‘fname’,x0)`
: 求单变量非线性方程在x0附近的根

#  编程

Matlab语言与其他计算机语言一样,可用于编程

## M文件

* 用matlab语言编写的程序
* Matlab中的内部函数与命令以及各种工具箱
* 分为命令文件和函数文件

|               | 命令文件      | 函数文件 |
|---------------|:--------------|:---------|
| 输入/输出参数 | 无            | 有       |
| 变量作用域    | Matlab工作空间| 函数内部 |
| 调用方式      | 命令执行      | 函数调用 |

## 操作M文件

* 建立新的M文件
  * 命令按钮：工具栏上`New M-File`命令按钮
  * 命令操作：`edit`
* 打开已有的M文件
  * 命令按钮：工具栏上`Open File`命令按钮
  * 命令操作：`edit 文件名`

::: {.callout-note}
对于不在当前路径的M文件，点击`设置路径`按钮，将其路径加到`MATLAB搜索路径`
:::

## 程序控制结构

* 使用matlab的数据结构
  * 矩阵、向量…
  * 充分利用数据结构特点，简化程序结构
* 顺序结构、选择结构、循环结构

## 顺序结构

* 数据输入
~~~ matlab
a = input(‘输入正整数’);
input(‘请输入姓名’,’s’)
~~~
* 数据处理
~~~ matlab
a = a + 1;
~~~
* 数据输出
~~~ matlab
disp(a)
fprintf(‘圆周率pi=%10.9f’, pi)
~~~

## 选择结构: `if`

:::: columns

::: {.column width="40%"}
~~~ matlab
if 条件
    语句组
end

if 条件1
    语句组1
elseif 条件2
    语句组2
    …
elseif 条件n
    语句组n
end

if 条件
    语句组1
else
    语句组2
end
~~~
:::

::: {.column width="60%"}

$$
y  = \begin{cases}
\frac{sin(x)}{x} &  x \neq 0\\
1 &  x = 0
\end{cases}
$$

~~~ matlab
x = input(‘请输入x=’);
if x ~= 0
    y = sin(x)/x;
else
    y = 1;
end
y
~~~
:::

::::

## 选择结构：`switch`

~~~ matlab
switch 表达式
case 表达式1
    语句组1
case 表达式2
    语句组2
    …
case 表达式n
    语句组n
otherwise
    语句组n+1
~~~

## 循环结构

:::: columns

::: {.column width="60%"}
~~~ matlab
for 循环变量=表达式1 : 表达式2 : 表达式3
    循环语句
end

while 条件
    循环语句
end
~~~

* `break` 语句和 `continue` 语句
:::

::: {.column width="40%"}
$$
A = \begin{bmatrix}
1^0 & 1^1 & 1^2 \\
2^0 & 2^1 & 2^2 \\
3^0 & 3^1 & 3^2 \\
\end{bmatrix}
$$

~~~ matlab
for i = 1 : 1 : 3
    for j = 0 : 1 : 2
        A (i, j + 1) = i ^ j
    end
end
A
~~~
:::
::::

## 函数文件

* 函数文件的基本结构

~~~ matlab
function [输出函数1, …, 输出参数n] = 函数名(输入参数1, … , 输入参数m)
注释说明部分
函数体语句
~~~
~~~ matlab
function [s, c] = mycircle(r)
% 计算半径为的圆的面积和周长
% [s,c] = mycircle(r)
% r: 圆半径
% s, c: 圆面积与周长
s = pi * r * r;
c = 2 * pi * r;
~~~

::: {.callout-note}
* 写一个判断是否为闰年的函数
* 写一个判断是否为素数的函数
:::

## 判断是否为闰年

~~~ matlab
function isleap = myisleap(year)
% 判断是否为闰年
% isleap = myisleap(year)
isleap = mod(year, 4) == 0 & (mod(year, 100) ~= 0 | mod(year, 400) == 0);
~~~

## 判断是否为素数

~~~ matlab
function isp = myisprime(n)
% 判断是否为素数
% isp = myisprime(n)
% n: 整数
isp = true;
for i = 2 : 1 : floor(sqrt(n))
    if mod(n, i) == 0
        isp = false;
        break
~~~

* 向量化写法

~~~ matlab
function isp = myisprime(n)
% 判断是否为素数
% isp = myisprime(n)
isp = ~any(mod(n, 2 : 1 : floor(sqrt(n))) == 0);
~~~

## 函数调用

~~~ matlab
[输出函数1, … ,输出参数n] = 函数名(输入参数1,…, 输入参数m)
~~~
~~~ matlab
function [s, c] = mycircle(r)
% 计算半径为的圆的面积和周长
% [s,c] = mycircle(r)
% r: 圆半径
% s, c: 圆面积与周长
s = pi * r * r;
c = 2 * pi * r;
~~~
~~~ matlab
A = mycircle(r);
A
~~~

* 函数支持递归

## 程序举例

* 利用编程求解某个数学问题
  * 建立一个可计算的数学模型
  * 离散化、递推化：累加、累积、递推等

::: {.callout-note}
* 计算`sin(x)`近似值
* 计算多项式的值
* 计算定积分值
* 求方程的近似根
:::

## 计算$\pi$的近似值

* $\pi = \frac{4}{1} - \frac{4}{3} + \frac{4}{5} - \frac{4}{7} + \cdots$ (莱布尼兹公式)
* $\pi = 3 + \frac{4}{2 \times 3 \times 4} - \frac{4}{4 \times 5 \times 6} + \frac{4}{6 \times 7 \times 8} - \cdots$

~~~ matlab
function p = mypi(n)
% 计算π的近似值
% p = mypi(n)
p = 4 * sum((-1) .^ (2:n+1) ./ (1:2:2*n));
~~~

# 绘图

## 手工绘图

1. 找点: `x=0, pi/4, pi/2,...`
2. 计算函数值: `sin(0), sin(pi/4), sin(pi/2),...`
3. 描点: 在坐标系中画出这些离散点
4. 用直线或曲线连接这些点，得到函数的大致图形

![](images/manual_plot.png)

## MATLAB绘图

1. 给出离散点列: `x = 0:pi/10:2*pi`
2. 计算函数值: `y = sin(x)`
3. 画图: 用`plot`函数绘图

~~~ matlab
x =linnspace(0, 2*pi, 100);
y = sin(x);
plot(x, y);
~~~

::: callout-tip
用`linspace(起点,终点,点数)`函数可以生成固定点数的等差数列
:::

## 二维绘图函数

* `plot(x, y)`: `x`和`y`长度相同，分别存储$x$、$y$坐标
* 在$0 \le x \le 2\pi$区间内，绘制曲线$y=2e^{-0.5x}sin(2\pi x)$

::: fragment

:::: columns

::: {.column width="50%"}
~~~ matlab
x=0:pi/100:2*pi;
y=2*exp(-0.5*x) .* sin(2*pi*x);
plot(x,y)
~~~
:::

::: {.column width="50%"}
![](images/plot2d.png)
:::

::::

:::

## 绘制参数方程曲线

$$
\begin{cases}
  x &= tcos(3t)\\
  y &= tsin^2(t)
\end{cases}
, t \in [-\pi,\pi]
$$

::: fragment

:::: columns
::: {.column width="50%"}
~~~ matlab
t = -pi:pi/100:pi;
x = t .* cos(3 * t);
y = t .* sin(t) .^ 2;
plot(x, y);
~~~
:::

::: {.column width="50%"}
![](images/parametric_curve.png)
:::
::::

:::

## `plot(x, y)`的参数形式

* 当`x`、`y`是维度相同的矩阵，以对应列为横、纵坐标绘图

~~~ matlab
t = linspace(0,2*pi,100);
x = [t;t]';
y = [sin(t);cos(t)]';
plot(x,y)
~~~

* 当`x`是向量，`y`有一维与`x`同维，则以`x`为横坐标，`y`中与其同维的列为纵坐标画出多根曲线

~~~ matlab
x = linspace(0,2*pi,100);
y = [sin(x);cos(x)];
plot(x, y)
~~~

* 最简单形式：`plot(y)`，此时横坐标是元素对应的下标

~~~ matlab
y = [1, 1, 1; 4, 8, 16; 9, 27, 81];
plot(y)
~~~

## 图形保持

* 下面代码会在图像窗口画出几条曲线？

~~~ matlab
t = 0:pi/100:2*pi;
plot(t, sin(t));
plot(t, cos(t));
~~~

::: fragment
* 答案：**1条**，只会画出$cos(t)$

::: callout-important
* 默认情况下，每次执行`plot`都会清空前面的图形
  * `hold on`: 保持前面的图形
  * `hold off`: 不保持前面的图形
  * `hold`: 在两种状态之间切换
:::

:::

## 思考题

::: callout-tip
* 已知`t`，在同一坐标系同时画出`sin(t)`和`cos(t)`曲线有几种方法?
:::

::: fragment
~~~ matlab
plot(t, sin(t), t, cos(t));
~~~
:::

::: fragment
~~~ matlab
plot([t; t]', [sin(t); cos(t)]');
~~~
:::

::: fragment
~~~ matlab
plot(t, [sin(t); cos(t)]');
~~~
:::

::: fragment
~~~ matlab
plot(t, sin(t));
hold on;
plot(t, cos(t));
~~~
:::

## 带选项的`plot`函数

:::: columns

::: {.column width="60%"}

~~~ matlab
plot(x1, y1, 选项1, x2, y2, 选项2,...)
~~~

~~~ matlab
x = [0:0.2:2*pi];
plot(x,cos(x));
plot(x,cos(x),'r+:');  % 红色、虚线、  加号点
plot(x,cos(x),'bd-.'); % 蓝色、点划线、菱形点
plot(x,cos(x),'k*-');  % 黑色、实线、  星号点
~~~

![](images/plot_options.png)

:::

::: {.column width="40%"}

::: small-table

| 线型       | 点标记      | 颜色    |
| :--------- | :---------- | :------ |
| `-`  实线  | `.` 点      | `y` 黄色|
| `:`  虚线  | `o` 小圆圈  | `m` 棕色|
| `-.` 点划线| `x` 叉子符  | `c` 青色|
| `--` 间断线| `+` 加号    | `r` 红色|
|            | `*` 星号    | `g` 绿色|
|            | `s` 方格    | `b` 蓝色|
|            | `d` 菱形    | `w` 白色|
|            | `^` 朝上三角| `k` 黑色|
|            | `v` 朝下三角|         |
|            | `>` 朝右三角|         |
|            | `<` 朝左三角|         |
|            | `p` 五角星  |         |
|            | `h` 六角星  |         |

:::

:::
::::

## 牛刀小试

::: callout-tip
用不同线型和颜色在同一坐标内绘制曲线$y=2e^{-0.5x}sin(2\pi x)$及其包络线
:::

::: fragment

:::: columns
::: {.column width="60%"}
~~~ matlab
x = (0:pi/100:2*pi)';
y1 = 2*exp(-0.5*x)*[1,-1];
y2 = 2*exp(-0.5*x).*sin(2*pi*x);
x1 = (0:12)/2;
y3 = 2*exp(-0.5*x1).*sin(2*pi*x1);
plot(x,y1,'g:',x,y2,'b--',x1,y3,'rp'); % <1>
~~~

1. 这行也可以用`hold on`实现:
~~~ matlab
plot(x,y1,'g:');
hold on
plot(x,y2,'b--');
plot(x1,y3,'rp');
hold off;
~~~
:::
::: {.column width="40%"}
![](images/enclose.png)
:::
::::
:::

## 双纵坐标函数

* 把不同量纲、不同数量级的两个函数绘制在同一坐标中

::: callout-tip
用不同标度在同一坐标内绘制曲线$y_1=e^{-0.5x}sin(2\pi x)$及曲线$y_2=1.5e^{-0.1x}sin(x)$
:::

:::: columns

::: {.column width="60%"}
~~~ matlab
x1 = 0:pi/100:2*pi;
x2 = 0:pi/100:3*pi;
y1 = exp(-0.5*x1).*sin(2*pi*x1);
y2 = 1.5*exp(-0.1*x2).*sin(x2);
plotyy(x1,y1,x2,y2);
~~~
:::

::: {.column width="40%"}
![](images/plot_yy.png)
:::
::::

## 绘图的辅助操作

:::: columns

::: {.column width="60%"}
* `title(图形名称)`
* `xlabel(x轴说明)`
* `ylabel(y轴说明)`
* `text(x,y,图形说明)`
* `legend(图例1,图例2,…)`
:::

::: {.column width="40%"}
~~~ matlab
x = 0:pi/100:4*pi;
y = sin(x);
plot(x,y);
title('y=sin(x)的图像');
xlabel('x');
ylabel('y=sin(x)');
text(pi/2, 0.8,'最大值');
legend('sin(x)');
~~~

![](images/plot_help.png)
:::

::::

## 坐标控制

* `axis([xmin xmax ymin ymax zmin zmax])`
* `axis equal`: 纵、横坐标轴采用等长刻度
* `axis square`: 产生正方形坐标系(缺省为矩形)
* `axis auto`: 使用缺省设置
* `axis on/off`: 显示/隐藏坐标轴
* `grid on/off`: 显示/隐藏网格线
* `box on/off`: 显示/隐藏边框线

## 子窗口 {.smaller}

* `subplot(m, n, p)`: 将绘图区域划分为$m\times n$个子图,并在第p个子图上绘图(子图从上到下、从左到右进行编号，从1开始)

:::: columns

::: {.column width="35%"}
~~~ matlab
x=linspace(0,2*pi,60);
y=sin(x);
z=cos(x);
t=sin(x)./(cos(x)+eps);
ct=cos(x)./(sin(x)+eps);
subplot(2,2,1);
plot(x,y);
title('sin(x)');
axis ([0,2*pi,-1,1]);
subplot(2,2,2);
plot(x,z);
title('cos(x)');
axis ([0,2*pi,-1,1]);
subplot(2,2,3);
plot(x,t);
title('tangent(x)');
axis ([0,2*pi,-40,40]);
subplot(2,2,4);
plot(x,ct);
title('cotangent(x)');
axis ([0,2*pi,-40,40]);
~~~
:::

::: {.column width="65%"}
![](images/subfig.png)
:::
::::

## 窗口灵活分割 {.smaller}

:::: columns

::: {.column width="50%"}
~~~ matlab
x=linspace(0,2*pi,60); y=sin(x);
subplot(2,2,1); %选择2×2个区中的1号区
stairs(x,y);
title('sin(x)-1');
axis ([0,2*pi,-1,1]);
subplot(2,1,2); %选择2×1个区中的2号区
stem(x,y);
title('sin(x)-2');
axis ([0,2*pi,-1,1]);
subplot(4,4,3); %选择4×4个区中的3号区
plot(x,y);
title('sin(x)');
axis ([0,2*pi,-1,1]);
subplot(4,4,4); %选择4×4个区中的4号区
plot(x, cos(x));
title('cos(x)');
axis ([0,2*pi,-1,1]);
subplot(4,4,7); %选择4×4个区中的7号区
plot(x, sin(x)./(cos(x)+eps));
title('tangent(x)');
axis ([0,2*pi,-40,40]);
subplot(4,4,8); %选择4×4个区中的8号区
plot(x, cos(x)./(sin(x)+eps));
title('cotangent(x)');
axis ([0,2*pi,-40,40]);
~~~
:::

::: {.column width="50%"}
![](images/figsplit.png)
:::
::::

## 绘制其他二维图形

* `bar(x,y,选项)`: 条形图
* `stairs(x,y,选项)`: 阶梯图
* `stem(x,y,选项)`: 杆图
* `fill(x1,y1,选项1,x2,y2,选项2,…)`: 填充图

## 其他二维图形示例

* 用条形图、填充图、阶梯图和杆图绘制曲线$y=2e^{-0.5x}$

:::: columns
::: {.column width="50%"}
~~~ matlab
x=0:0.35:7;
y=2*exp(-0.5*x);
subplot(2,2,1);
bar(x,y,'g');
title('bar(x,y,''g'')');
axis([0,7,0,2]); 
subplot(2,2,2);
fill(x,y,'r');
title('fill(x,y,''r'')');
axis([0,7,0,2]);
subplot(2,2,3);
stairs(x,y,'b');
title('stairs(x,y,''b'')');
axis([0,7,0,2]);
subplot(2,2,4);
stem(x,y,'k');
title('stem(x,y,''k'')');
axis([0,7,0,2]);
~~~
:::

::: {.column width="50%"}
![](images/other2d.png)
:::

::::

## 极坐标图

* `polar(theta, rho, 选项)`
* 绘制$\rho=sin(2\theta)cos(2\theta)$的极坐标图

:::: columns

::: {.column width="60%"}
~~~ matlab
theta=0:0.01:2*pi;
rho=sin(2*theta).*cos(2*theta);
polar(theta,rho,'k');
~~~

::: callout-tip
自学对数坐标、半对数坐标`semilogx`、`semilogy`和`loglog`
:::
:::

::: {.column width="40%"}
![](images/polar_sample.png)
:::
::::

## 空间三维作图

:::: columns

::: {.column width="60%"}
* 画出三维螺旋线

$$
\begin{cases}
x = 2t\\
y = sin(t)\\
z = cos(t)
\end{cases}
$$

~~~ matlab
t=[0:0.1:10*pi];
x=2*t; 
y=sin(t); 
z=cos(t);
plot3(x,y,z);
~~~
:::

::: {.column width="40%"}
![](images/plot3_sample.png)
:::
::::

## 绘制三维曲面

~~~ matlab
[X,Y]=meshgrid(-8:0.1:8);
r=sqrt(X.^2+Y.^2)+eps;
Z=sin(r)./r;
surf(X,Y,Z, 'EdgeColor','none');
~~~

![](images/mexicain.png)

## Matlab画图类型

![](images/matlab_plots.png)
